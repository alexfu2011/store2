{"ast":null,"code":"var _jsxFileName = \"/Users/mac/dev/E-Commerce-Admin-React/src/category/categoryForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Button, Modal, Form, Col } from 'react-bootstrap';\nimport { addCategory, updateCategory } from './../services/categoryService';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CategoryForm = props => {\n  _s();\n\n  const [name, setName] = useState('');\n  const [isActive, setIsActive] = useState(false);\n  const [validated, setValidated] = useState(false);\n  const [editCategoryId, setEditCategoryId] = useState('');\n  const [errorDb, setErrorDb] = useState(false);\n  const [isEdit, setIsEdit] = useState(false);\n\n  const setField = value => {\n    setName(value);\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n\n    if (form.checkValidity() === true) {\n      if (props.isEdit) {\n        const data = await updateCategory({\n          name: name,\n          isActive: isActive,\n          id: editCategoryId\n        });\n\n        if (data) {\n          setSnackBarOpen(true);\n          props.onSave();\n        } else {\n          setErrorDb(true);\n        }\n      } else {\n        const data = await addCategory(name);\n\n        if (data) {\n          setSnackBarOpen(true);\n          setIsEdit(true);\n          props.onSave();\n        } else {\n          setErrorDb(true);\n        }\n      }\n    }\n\n    setValidated(true);\n  }; // const view=()=>{\n  //     console.log('======',name)\n  //     console.log('=--=-=',props)\n  //     console.log(editCategoryId)\n  // }\n\n\n  const [snackBarOpen, setSnackBarOpen] = useState(false);\n\n  const handleCloseSnack = () => {\n    setSnackBarOpen(false);\n  };\n\n  useEffect(() => {\n    if (props.isEdit) {\n      // console.log('hi')\n      setName(props.editCategory.name);\n      setIsActive(props.editCategory.isActive);\n      setEditCategoryId(props.editCategory._id);\n    } else {\n      setName('');\n      setValidated(false);\n      setEditCategoryId([]);\n    }\n\n    setErrorDb(false); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      centered: true,\n      ...props,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: \"Add Category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          noValidate: true,\n          validated: validated,\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(Form.Row, {\n            children: /*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Category Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                required: true,\n                type: \"text\",\n                value: name,\n                onChange: e => setField(e.target.value),\n                placeholder: \"Enter Category Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n                type: \"invalid\",\n                children: \"Please Enter a Category Name.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n            children: props.isEdit && /*#__PURE__*/_jsxDEV(Form.Group, {\n              as: Col,\n              children: [/*#__PURE__*/_jsxDEV(Form.Check, {\n                checked: isActive === true,\n                type: \"radio\",\n                label: \"Active\",\n                name: \"formHorizontalRadios\",\n                onClick: () => setIsActive(true),\n                id: \"formHorizontalRadios1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 34\n              }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n                checked: isActive === false,\n                type: \"radio\",\n                label: \"InActive\",\n                onClick: () => setIsActive(false),\n                name: \"formHorizontalRadios\",\n                id: \"formHorizontalRadios2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 34\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 30\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            children: [\" \", props.isEdit ? 'Update' : 'Save']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [errorDb && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: 'red'\n            },\n            children: [\"Cannot \", isEdit ? 'Update' : 'Save', \" data\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            props.onHide();\n            setName('');\n          },\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: snackBarOpen,\n      message: props.isEdit ? \"Successfully Updated\" : \"Successfully Added\",\n      autoHideDuration: 2000,\n      onClose: handleCloseSnack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 13\n  }, this);\n};\n\n_s(CategoryForm, \"BCVDu1gAKbEdtZr7jJ+MPgBxlgk=\");\n\n_c = CategoryForm;\nexport default CategoryForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CategoryForm\");","map":{"version":3,"sources":["/Users/mac/dev/E-Commerce-Admin-React/src/category/categoryForm.js"],"names":["React","useEffect","useState","Button","Modal","Form","Col","addCategory","updateCategory","Snackbar","CategoryForm","props","name","setName","isActive","setIsActive","validated","setValidated","editCategoryId","setEditCategoryId","errorDb","setErrorDb","isEdit","setIsEdit","setField","value","handleSubmit","e","preventDefault","form","currentTarget","checkValidity","data","id","setSnackBarOpen","onSave","snackBarOpen","handleCloseSnack","editCategory","_id","target","color","onHide"],"mappings":"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","sourcesContent":["import React,{useEffect, useState} from 'react'\nimport { Button, Modal, Form, Col } from 'react-bootstrap'\nimport {addCategory,updateCategory} from './../services/categoryService'\nimport Snackbar from '@material-ui/core/Snackbar'\n\nexport const CategoryForm =(props)=> {\n    const [name,setName] = useState('')\n    const [isActive,setIsActive] = useState(false)\n    const [validated, setValidated] = useState(false);\n    const [editCategoryId,setEditCategoryId]= useState('')\n    const [errorDb,setErrorDb] = useState(false)\n    const [isEdit,setIsEdit]= useState(false)\n   const setField=(value)=>{\n        \n       setName(value)   \n    }\n    \n    const handleSubmit=async(e)=>{\n       \n        e.preventDefault();\n\n        const form = e.currentTarget;\n        if(form.checkValidity() === true){\n            if(props.isEdit){\n                \n                const data = await updateCategory({name:name,\n                        isActive:isActive,\n                        id:editCategoryId\n                })\n                if (data) {\n                    setSnackBarOpen(true)\n                    props.onSave()\n                }\n                else{\n                    setErrorDb(true)\n                }\n            }\n            else{\n                const data = await addCategory(name)\n                if (data) {\n                    setSnackBarOpen(true)\n                    setIsEdit(true)\n                    props.onSave()\n                }\n                else{\n                    setErrorDb(true)\n                }\n            }\n        }\n        setValidated(true);\n    }\n\n    // const view=()=>{\n    //     console.log('======',name)\n    //     console.log('=--=-=',props)\n    //     console.log(editCategoryId)\n    // }\n    const [snackBarOpen,setSnackBarOpen] = useState(false)\n    const handleCloseSnack=()=>{\n        setSnackBarOpen(false)\n    }\n    useEffect(()=>{\n        if(props.isEdit){\n            // console.log('hi')\n            setName(props.editCategory.name)\n            setIsActive(props.editCategory.isActive)\n            setEditCategoryId(props.editCategory._id)\n        }\n        else{\n            setName('')\n            setValidated(false)\n            setEditCategoryId([])\n        }\n        setErrorDb(false)          // eslint-disable-next-line react-hooks/exhaustive-deps\n    },[props])\n\n    \n        return (\n            <div>\n            <Modal  centered  {...props} >\n                <Modal.Header closeButton>\n                    Add Category\n                </Modal.Header>\n                <Modal.Body>\n                    <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                        <Form.Row>\n\n                            <Form.Group as={Col} >\n                                <Form.Label>Category Name</Form.Label>\n                                <Form.Control required type=\"text\" value={name}  onChange={(e) => setField( e.target.value)} placeholder=\"Enter Category Name\" />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    Please Enter a Category Name.\n                                    </Form.Control.Feedback>\n                            </Form.Group>\n                            </Form.Row>\n                            <Form.Row>\n                            {props.isEdit  &&\n                             <Form.Group as={Col} >\n                                 <Form.Check \n                                  checked={isActive === true}\n                                     type=\"radio\"\n                                     label=\"Active\"\n                                     name=\"formHorizontalRadios\"\n                                      onClick={() => setIsActive(true)}\n                                     id=\"formHorizontalRadios1\"\n                                 />\n                                 <Form.Check \n                                   checked={isActive === false}\n                                     type=\"radio\"\n                                     label=\"InActive\"\n                                     onClick={() => setIsActive(false)}\n                                     name=\"formHorizontalRadios\"\n                                     id=\"formHorizontalRadios2\"\n                                 />\n                             \n                         </Form.Group>\n                            }\n                        </Form.Row>\n                         <Button type='submit'> {props.isEdit ? 'Update' : 'Save'}</Button>\n                    </Form>\n                    \n                </Modal.Body>\n                <Modal.Footer>\n                    {errorDb && <p><p style={{color:'red'}}>Cannot {isEdit ? 'Update' : 'Save'} data</p></p>}\n                \n                {/* <Button onClick={() => { view() }}>View</Button> */}\n                    <Button onClick={() => { props.onHide()\n                    setName('')\n                    }}>Close</Button>\n                </Modal.Footer>\n            </Modal>\n            <Snackbar open={snackBarOpen} message={props.isEdit?\"Successfully Updated\":\"Successfully Added\"} \n            autoHideDuration={2000} onClose={handleCloseSnack}>\n       \n       </Snackbar>\n            </div>\n       \n        )\n\n}\nexport default CategoryForm"]},"metadata":{},"sourceType":"module"}