[{"/Users/mac/dev/E-Commerce-Admin-React/src/index.js":"1","/Users/mac/dev/E-Commerce-Admin-React/src/App.js":"2","/Users/mac/dev/E-Commerce-Admin-React/src/reportWebVitals.js":"3","/Users/mac/dev/E-Commerce-Admin-React/src/home/home.js":"4","/Users/mac/dev/E-Commerce-Admin-React/src/orders/orderList.js":"5","/Users/mac/dev/E-Commerce-Admin-React/src/orders/orderDetails.js":"6","/Users/mac/dev/E-Commerce-Admin-React/src/products/product.js":"7","/Users/mac/dev/E-Commerce-Admin-React/src/products/variantForm.js":"8","/Users/mac/dev/E-Commerce-Admin-React/src/auth/login.js":"9","/Users/mac/dev/E-Commerce-Admin-React/src/products/productForm.js":"10","/Users/mac/dev/E-Commerce-Admin-React/src/tag/tagList.js":"11","/Users/mac/dev/E-Commerce-Admin-React/src/category/categoryList.js":"12","/Users/mac/dev/E-Commerce-Admin-React/src/category/subCategory/subCategoryForm.js":"13","/Users/mac/dev/E-Commerce-Admin-React/src/category/categoryForm.js":"14","/Users/mac/dev/E-Commerce-Admin-React/src/tag/tagModal.js":"15","/Users/mac/dev/E-Commerce-Admin-React/src/services/orderService.js":"16","/Users/mac/dev/E-Commerce-Admin-React/src/services/authserivce.js":"17","/Users/mac/dev/E-Commerce-Admin-React/src/services/productService.js":"18","/Users/mac/dev/E-Commerce-Admin-React/src/services/categoryService.js":"19","/Users/mac/dev/E-Commerce-Admin-React/src/services/tagService.js":"20","/Users/mac/dev/E-Commerce-Admin-React/src/components/navBar.js":"21","/Users/mac/dev/E-Commerce-Admin-React/src/constants/auth.js":"22","/Users/mac/dev/store2/admin/src/index.js":"23","/Users/mac/dev/store2/admin/src/reportWebVitals.js":"24","/Users/mac/dev/store2/admin/src/App.js":"25","/Users/mac/dev/store2/admin/src/home/home.js":"26","/Users/mac/dev/store2/admin/src/auth/login.js":"27","/Users/mac/dev/store2/admin/src/products/productForm.js":"28","/Users/mac/dev/store2/admin/src/orders/orderDetails.js":"29","/Users/mac/dev/store2/admin/src/products/variantForm.js":"30","/Users/mac/dev/store2/admin/src/products/product.js":"31","/Users/mac/dev/store2/admin/src/category/categoryList.js":"32","/Users/mac/dev/store2/admin/src/orders/orderList.js":"33","/Users/mac/dev/store2/admin/src/tag/tagList.js":"34","/Users/mac/dev/store2/admin/src/category/subCategory/subCategoryForm.js":"35","/Users/mac/dev/store2/admin/src/category/categoryForm.js":"36","/Users/mac/dev/store2/admin/src/tag/tagModal.js":"37","/Users/mac/dev/store2/admin/src/components/navBar.js":"38","/Users/mac/dev/store2/admin/src/services/productService.js":"39","/Users/mac/dev/store2/admin/src/services/authserivce.js":"40","/Users/mac/dev/store2/admin/src/services/tagService.js":"41","/Users/mac/dev/store2/admin/src/services/categoryService.js":"42","/Users/mac/dev/store2/admin/src/services/orderService.js":"43","/Users/mac/dev/store2/admin/src/constants/auth.js":"44","/Users/mac/dev/store2/admin/src/products/productEditForm.js":"45"},{"size":639,"mtime":1619161170591,"results":"46","hashOfConfig":"47"},{"size":1389,"mtime":1619161170584,"results":"48","hashOfConfig":"47"},{"size":362,"mtime":1619161170595,"results":"49","hashOfConfig":"47"},{"size":5360,"mtime":1619161170591,"results":"50","hashOfConfig":"47"},{"size":3907,"mtime":1619161170594,"results":"51","hashOfConfig":"47"},{"size":5585,"mtime":1619161170594,"results":"52","hashOfConfig":"47"},{"size":4568,"mtime":1619161170594,"results":"53","hashOfConfig":"47"},{"size":13561,"mtime":1619161170595,"results":"54","hashOfConfig":"47"},{"size":1713,"mtime":1619161170588,"results":"55","hashOfConfig":"47"},{"size":33074,"mtime":1619161170594,"results":"56","hashOfConfig":"47"},{"size":5328,"mtime":1619161170596,"results":"57","hashOfConfig":"47"},{"size":7669,"mtime":1619161170590,"results":"58","hashOfConfig":"47"},{"size":5838,"mtime":1619161170590,"results":"59","hashOfConfig":"47"},{"size":5257,"mtime":1619161170590,"results":"60","hashOfConfig":"47"},{"size":5183,"mtime":1619161170596,"results":"61","hashOfConfig":"47"},{"size":963,"mtime":1619161170595,"results":"62","hashOfConfig":"47"},{"size":180,"mtime":1619161170595,"results":"63","hashOfConfig":"47"},{"size":6891,"mtime":1619161170595,"results":"64","hashOfConfig":"47"},{"size":3527,"mtime":1619161170595,"results":"65","hashOfConfig":"47"},{"size":1654,"mtime":1619161170596,"results":"66","hashOfConfig":"47"},{"size":1331,"mtime":1619161170591,"results":"67","hashOfConfig":"47"},{"size":257,"mtime":1619161170591,"results":"68","hashOfConfig":"47"},{"size":639,"mtime":1619162437312,"results":"69","hashOfConfig":"70"},{"size":362,"mtime":1619161170595,"results":"71","hashOfConfig":"70"},{"size":1467,"mtime":1619598967336,"results":"72","hashOfConfig":"70"},{"size":3043,"mtime":1619163117566,"results":"73","hashOfConfig":"70"},{"size":1621,"mtime":1619598242205,"results":"74","hashOfConfig":"70"},{"size":31752,"mtime":1619407081470,"results":"75","hashOfConfig":"70"},{"size":5585,"mtime":1619161170594,"results":"76","hashOfConfig":"70"},{"size":13561,"mtime":1619161170595,"results":"77","hashOfConfig":"70"},{"size":4984,"mtime":1619598917491,"results":"78","hashOfConfig":"70"},{"size":7055,"mtime":1619410151956,"results":"79","hashOfConfig":"70"},{"size":3907,"mtime":1619161170594,"results":"80","hashOfConfig":"70"},{"size":5328,"mtime":1619161170596,"results":"81","hashOfConfig":"70"},{"size":5838,"mtime":1619161170590,"results":"82","hashOfConfig":"70"},{"size":5257,"mtime":1619161170590,"results":"83","hashOfConfig":"70"},{"size":5183,"mtime":1619161170596,"results":"84","hashOfConfig":"70"},{"size":1331,"mtime":1619161170591,"results":"85","hashOfConfig":"70"},{"size":6297,"mtime":1619496407264,"results":"86","hashOfConfig":"70"},{"size":386,"mtime":1619508188529,"results":"87","hashOfConfig":"70"},{"size":1654,"mtime":1619161170596,"results":"88","hashOfConfig":"70"},{"size":3558,"mtime":1619412242646,"results":"89","hashOfConfig":"70"},{"size":963,"mtime":1619161170595,"results":"90","hashOfConfig":"70"},{"size":257,"mtime":1619164313895,"results":"91","hashOfConfig":"70"},{"size":13608,"mtime":1619409022777,"results":"92","hashOfConfig":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"n1o6nj",{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},"xg1hey",{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"139"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"139"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"139"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"139"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"139"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"139"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"139"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"139"},"/Users/mac/dev/E-Commerce-Admin-React/src/index.js",[],"/Users/mac/dev/E-Commerce-Admin-React/src/App.js",[],"/Users/mac/dev/E-Commerce-Admin-React/src/reportWebVitals.js",[],"/Users/mac/dev/E-Commerce-Admin-React/src/home/home.js",[],"/Users/mac/dev/E-Commerce-Admin-React/src/orders/orderList.js",[],"/Users/mac/dev/E-Commerce-Admin-React/src/orders/orderDetails.js",[],"/Users/mac/dev/E-Commerce-Admin-React/src/products/product.js",[],"/Users/mac/dev/E-Commerce-Admin-React/src/products/variantForm.js",[],"/Users/mac/dev/E-Commerce-Admin-React/src/auth/login.js",[],"/Users/mac/dev/E-Commerce-Admin-React/src/products/productForm.js",[],"/Users/mac/dev/E-Commerce-Admin-React/src/tag/tagList.js",[],"/Users/mac/dev/E-Commerce-Admin-React/src/category/categoryList.js",[],"/Users/mac/dev/E-Commerce-Admin-React/src/category/subCategory/subCategoryForm.js",[],"/Users/mac/dev/E-Commerce-Admin-React/src/category/categoryForm.js",[],"/Users/mac/dev/E-Commerce-Admin-React/src/tag/tagModal.js",[],"/Users/mac/dev/E-Commerce-Admin-React/src/services/orderService.js",[],"/Users/mac/dev/E-Commerce-Admin-React/src/services/authserivce.js",[],"/Users/mac/dev/E-Commerce-Admin-React/src/services/productService.js",[],"/Users/mac/dev/E-Commerce-Admin-React/src/services/categoryService.js",[],"/Users/mac/dev/E-Commerce-Admin-React/src/services/tagService.js",[],"/Users/mac/dev/E-Commerce-Admin-React/src/components/navBar.js",[],"/Users/mac/dev/E-Commerce-Admin-React/src/constants/auth.js",[],"/Users/mac/dev/store2/admin/src/index.js",[],["192","193"],"/Users/mac/dev/store2/admin/src/reportWebVitals.js",[],"/Users/mac/dev/store2/admin/src/App.js",[],"/Users/mac/dev/store2/admin/src/home/home.js",["194","195","196","197","198","199"],"import React, { useState, useEffect } from 'react';\nimport NavBar from './../components/navBar'\nimport { Col, Row, Spinner } from 'react-bootstrap'\nimport { FiShoppingCart } from \"react-icons/fi\";\nimport { BiPackage } from \"react-icons/bi\";\nimport { FaTicketAlt } from \"react-icons/fa\";\nimport { getTotalProducts, getActiveProducts } from './../services/productService'\nimport { getActiveOrders, getTotalOrders } from './../services/orderService'\n\nimport './home.css'\nexport const Home = (props) => {\n    const [data, setData] = useState({\n        'TotalProducts': 0,\n        'ActiveProducts': 0,\n        'ActiveOrders': 0,\n        'TotalOrders': 0,\n        'loaded': false\n    })\n    const [dbError, setDbError] = useState(false)\n    const getValues = async () => {\n        const totalProducts = await getTotalProducts()\n        const activeProducts = await getActiveProducts()\n        const totalOrder = await getTotalOrders()\n        const activeOrder = await getActiveOrders()\n        console.log(totalOrder)\n        console.log(totalProducts)\n        console.log(activeOrder)\n        console.log(activeProducts)\n        //if(!totalOrder.error && !totalProducts.error && !activeOrder.error && !activeProducts.error){\n        setData({\n            ...data,\n            'TotalProducts': 0,\n            'ActiveProducts': [],\n            'ActiveOrders': [],\n            'TotalOrders': 0,\n            'loaded': true\n        })\n        //}\n        //else{\n        //    setDbError(true)\n        //}\n\n    }\n    // const View=()=>{\n    //     console.log('-----',data)\n    // }\n    useEffect(() => {\n        getValues()\n        // eslint-disable-next-line react-hooks/exhaustive-deps      \n    }, [props])\n    return (\n        <div className='body'>\n            <NavBar props={props}></NavBar>\n            {  data.loaded ?\n                <div >\n                    Loaded\n                </div> :\n                dbError ?\n                    <div style={{ width: '100%', height: '100px', marginTop: '300px' }} >\n                        <p style={{\n                            display: 'block', marginLeft: 'auto',\n                            marginRight: 'auto', textAlign: 'center'\n                        }}>\n                            服务器出错<br />\n                            <a href=\"/home\">请稍后再试。</a>\n                        </p>\n                    </div>\n                    :\n                    <div style={{ width: '100%', height: '100px', marginTop: '300px' }} >\n                        <Spinner style={{\n                            display: 'block', marginLeft: 'auto',\n                            marginRight: 'auto', height: '50px', width: '50px'\n                        }} animation=\"border\" variant=\"primary\" />\n                        <p style={{\n                            display: 'block', marginLeft: 'auto',\n                            marginRight: 'auto', textAlign: 'center'\n                        }}>加载中</p>\n                    </div>\n            }\n        </div>\n    )\n}\nexport default Home","/Users/mac/dev/store2/admin/src/auth/login.js",["200","201"],"import React, { useState, useContext, useEffect } from 'react';\nimport { useHistory } from \"react-router\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport \"./login.css\";\nimport { Login } from './../services/authserivce';\n\nexport const LoginPage = (props) => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const history = useHistory();\n\n\n  function validateForm() {\n    return username.length > 0 && password.length > 0;\n  }\n\n  function Loginhandler(username, password) {\n    Login(username, password).then(data => {\n      if (data.error) {\n        return;\n      }\n      console.log(data.token);\n      localStorage.setItem(\"token\", data.token);\n      history.push(\"/home\");\n    }).catch(() => {});\n  }\n\n  return (\n    <div className=\"Login\">\n      <Form >\n        <Form.Group size=\"lg\" controlId=\"username\">\n          <Form.Label>Username</Form.Label>\n          <Form.Control\n            autoFocus\n            type=\"username\"\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n          />\n        </Form.Group>\n        <Form.Group size=\"lg\" controlId=\"password\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n          />\n        </Form.Group>\n        <Button block size=\"lg\" onClick={() => { Loginhandler(username, password) }} disabled={!validateForm()}>\n          Login\n        </Button>\n      </Form>\n    </div>\n  );\n};\n\nexport default LoginPage;","/Users/mac/dev/store2/admin/src/products/productForm.js",["202","203","204","205"],"import React, { useState, useEffect } from 'react'\nimport { Form, Col,Collapse, Button, Spinner } from 'react-bootstrap';\nimport {  getAllTags, addProduct, editProduct } from './../services/productService'\nimport {getAllCategory,getAllSubCategory} from './../services/categoryService'\nimport { BsTrashFill } from \"react-icons/bs\";\n\n// import { VariantForm } from './variantForm'\n// import MaterialTable from 'material-table'\nimport { addTag } from './../services/tagService'\nimport Snackbar from '@material-ui/core/Snackbar'\n\nexport const ProductForm = (props) => {\n    \n    const styles = {\n        margin: \"20px 50px\"\n    }\n    const [open, setOpen] = useState(false);\n\n    // const columns = [{ title: \"Color\", field: 'color' },\n    // { title: \"Size\", field: 'size' },\n    // { title: \"Price\", field: 'price' },\n    // { title: \"Stock\", field: 'stock' },\n    // ]\n    const [snackBarOpen,setSnackBarOpen] = useState(false)\n    const handleCloseSnack=()=>{\n        setSnackBarOpen(false)\n    }\n    // const [editImage, setEditImage] = useState([])\n    // const [editVariant, setEditVariant] = useState({})\n    // const [isVariantEdit, setIsVariantEdit] = useState(false)\n    // const [modalShow, setModalShow] = React.useState(false);\n    const [gallery,setGallery]= useState([])\n    const [tag, setTag] = useState([])\n    const [tagNew, setTagNew] = useState([])\n    const [tagInput, setTagInput] = useState('')\n    const [subCategory, setSubCategory] = useState(null)\n    const [category, setCategory] = useState(null)\n    // const [variant, setVariant] = useState([])\n    // const [variantId, setVariantId] = useState([])\n    const [formf, setForm] = useState({url:''})\n    const [isEdit, setIsEdit] = useState(false)\n    const [tagId, setTagId] = useState([])\n    const [nullTag, setNullTag] = useState(false)\n    const [tagRequired, setTagRequired] = useState(false)\n    // const {edit} = props.location.state\n    const getValues = async () => {\n\n        try {\n            const category = await getAllCategory()\n            setCategory(category)\n            const tag = await getAllTags()\n            if (props.location.state) {\n                setTagId(props.location.state.tagId)\n\n                //const data = await tag.filter(item => {\n                //    return props.location.state.tagId.indexOf(item._id) === -1\n                //})\n                //setTag(data)\n            }\n            else {\n                setTag(tag)\n            }\n        }\n        catch (err) {\n            console.log(err)\n\n        }\n        if (!props.location.state) {\n\n            setIsEdit(false)\n        }\n        else {\n            setForm(props.location.state)\n            // setVariant(props.location.state.variants)\n            console.log(props.location.state)\n            setTagNew(props.location.state.tags)\n            setSub(props.location.state.category)\n            setGallery(props.location.state.gallery)\n            setIsEdit(true)\n        }\n    }\n    useEffect(() => {\n        getValues()\n        // setVariantRequired(false)\n        setTagRequired(false)\n        setValidated(false)\n        setStoreError(false)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n    // const tageditor=async(data)=>{\n    //    setTag(data)\n    // }\n    // const dataChooser = () => {\n\n    //     return variant\n    // }\n    const setSub =async(value)=>{\n        //const data = await getAllSubCategory(value)\n        //    console.log('-----------',data)\n        //    setSubCategory(data)\n    }\n    const setField = async(field, value) => {\n        if(field==='category'){\n            console.log('foreds',field,value)\n            setSub(value)\n        }\n        setForm({\n            ...formf,\n            [field]: value\n        })\n    }\n    const tagEvent = (e) => {\n        setTagInput(\n            e\n        )\n        setNullTag(false)\n\n    }\n    const setImgArray=()=>{\n        if(formf.url!==''){\n            console.log(formf.url)\n            setGallery([...gallery,\n            formf.url])\n            setForm({\n                ...formf,\n                url:''\n            })\n        }\n    }\n    const view = ()=>{\n        console.log('newtag',tagNew)\n        console.log('tagid',tagId)\n        console.log('----',formf)\n        console.log('oldtag',tag)\n        console.log(gallery)\n    }\n    // const ss = (data) => {\n    //     setVariantRequired(false)\n    //     setVariant(\n    //         data\n    //     )\n    //     setModalShow(false)\n    // }\n    // const s = (data) => {\n    //     setVariantRequired(false)\n    //     console.log('Saved',data)\n    //     setVariant([\n    //         ...variant,\n    //         data\n    //     ])\n    //     setVariantId([\n    //         ...variantId,\n    //         data._id])\n    //     setModalShow(false)\n    // }\n    const addTagHandler = async () => {\n        if (tagInput !== '') {\n            const data = await addTag(tagInput,false)\n            setTagNew([\n                ...tagNew,\n                data\n            ])\n            console.log(\"New Tag\",data)\n            setTagId([\n                ...tagId,\n                data._id\n            ])\n            setTagInput('')\n            setNullTag(false)\n        }\n        else {\n            setNullTag(true)\n        }\n    }\n    const reduceTag = (id) => {\n        setTagId([\n            ...tagId,\n            id\n        ])\n        setTag(tag.filter(item => item._id !== id))\n    }\n    const popTag = (id) => {\n        setTagId(tagId.filter(item => item !== id))\n        setTagNew(tagNew.filter(item => item._id !== id))\n    }\n    const [validated, setValidated] = useState(false);\n    const [storeError, setStoreError] = useState(false);\n    // const [variantRequired, setVariantRequired] = useState(false)\n    const handleSubmit = async (event) => {\n        const form = event.currentTarget;\n        console.log(tagId.length !== 0)\n        if (tagId.length !== 0 && gallery.length !== 0 &&  form.checkValidity() === true) {\n\n            event.preventDefault();\n            // setVariantRequired(false)\n            setTagRequired(false)\n            if (isEdit) {\n                // console.log('update')\n                const data = await editProduct(formf, props.location.state.id, gallery, tagId)\n                if (data) {\n                    console.log('hi')\n                    setSnackBarOpen(true)\n                    setTimeout(() => {\n                        props.history.push('/product/')\n                      \n                    }, 1000);                   \n                }\n                else {\n                    setStoreError(true)\n                }\n            }\n            else {\n                console.log('hi')\n                const data = await addProduct(formf, gallery, tagId)\n                if (data) {\n                    setSnackBarOpen(true)\n                    setTimeout(() => {\n                        props.history.push('/product')\n                        \n                    }, 1000);\n                   \n                }\n                else {\n                    setStoreError(true)\n                }\n            }\n        }\n        \n        else if (tagId.length === 0) {\n            // setVariantRequired(false)\n            setTagRequired(true)\n            event.preventDefault();\n        }\n        else {\n            event.preventDefault();\n            setTagRequired(false)\n            // setVariantRequired(true)\n        }\n        setValidated(true);\n    };\n\n\n    return (\n        <div>{!isEdit && <p>Add Product</p>}\n            {isEdit && <p>Update Product</p>}\n            <Button style={{ margin: '0px 5px' }} onClick={() => {\n                props.history.push('/product')\n            }}>\n                Back\n                    </Button>\n            {/* <Button onClick={()=>{view()}}>view</Button> */}\n\n\n                <Form style={styles} noValidate validated={validated} onSubmit={handleSubmit}>\n                    <Form.Row>\n\n                        <Form.Group as={Col} >\n                            <Form.Label>Product Name</Form.Label>\n                            <Form.Control required type=\"text\" value={formf.name} onChange={(e) => setField('name', e.target.value)} placeholder=\"Enter Product Name\" />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please Enter a Product Name.\n            </Form.Control.Feedback>\n\n                        </Form.Group>\n                        <Form.Group as={Col} >\n                            <Form.Label>Brand Name</Form.Label>\n                            <Form.Control required type=\"text\" value={formf.brandName} onChange={(e) => setField('brandName', e.target.value)} placeholder=\"Enter Brand Name\" />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please Enter a Brand Name.\n            </Form.Control.Feedback>\n                        </Form.Group>\n\n                    </Form.Row>\n                    <Form.Row>\n\n                        <Form.Group as={Col}>\n                            <Form.Label>Short Desription</Form.Label>\n                            <Form.Control required type=\"text\" value={formf.shortDescription} onChange={(e) => setField('shortDescription', e.target.value)} placeholder=\"Enter Short Description\" />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please Enter short description.\n            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col}>\n                            <Form.Label>Desription</Form.Label>\n                            <Form.Control required type=\"text\" value={formf.description} onChange={(e) => setField('description', e.target.value)} placeholder=\"Enter Description\" />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please Enter description.\n            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col}>\n                            <Form.Label>Sub Category</Form.Label>\n                            <Form.Control required as=\"select\"  defaultValue='' value={formf.subCategory} onChange={(e) => setField('subCategory', e.target.value)} >\n                                <option value=''>Select a Category</option>\n                                {subCategory && subCategory.map((team) => <option key={team._id} value={team._id}>{team.name}</option>)}\n\n                            </Form.Control>\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please  choose a Category.\n            </Form.Control.Feedback>\n                        </Form.Group>\n                    </Form.Row>\n                    <Form.Row>\n\n                        <div style={{ margin: '0px', width: '200px' }}>\n                            <Form.Group as={Col}>\n                                <Form.Label>Tag</Form.Label>\n                                <Form.Control type=\"text\" value={tagInput}\n                                    onChange={(e) => tagEvent(e.target.value)} placeholder=\"Enter Description\" />\n                                {nullTag && <p style={{ color: 'red' }}>Null valuues are not accepted</p>}\n                                <Button onClick={() => addTagHandler()}>Add</Button>\n                                <Form.Control.Feedback type=\"invalid\">\n                                    Please Enter description.\n            </Form.Control.Feedback>\n                            </Form.Group>\n                        </div>\n                        <div style={{ width: '200px' }}>\n                            <Form.Group as={Col}>\n                                <h4>Tags Applied</h4>\n                                <div style={{\n                                    border: '1px solid #000', height: '200px', width: '170px',\n                                    maxHeight: '200px', overflow: 'auto'\n                                }}>\n                                    <ul style={{ padding: '10px', display: 'flex', flexWrap: 'wrap' }}>\n                                        {tagNew && tagNew.map((value, index) => (\n                                            <li key={index} style={{\n                                                width: '100%', height: ' 32px', display: 'flex', alignItems: ' center',\n                                                justifyContent: 'center', color: '#fff',\n                                                fontSize: ' 14px',\n                                                listStyle: 'none',\n                                                borderRadius: '6px',\n                                                margin: '5px 10px',\n                                                background: '#0052cc'\n                                            }}>\n                                                <span style={{ marginTop: '3px' }}>{value.tag}</span>\n                                                <span\n                                                    onClick={() => {\n                                                        setTag([...tag, value])\n                                                        popTag(value._id)\n                                                    }}\n                                                    style={{\n                                                        width: '16px', height: '16px', display: 'block',\n                                                        lineHeight: '16px', fontSize: '14px',\n                                                        textAlign: 'center', position: 'relative', right: '-10px',\n                                                        color: ' #0052cc',\n                                                        borderRadius: '50%', background: '#fff', cursor: 'pointer'\n                                                    }}\n                                                >\n                                                    -\n\t\t\t\t\t\t</span>\n                                            </li>\n                                        ))}\n                                    </ul>\n                                    {tagRequired && <p style={{ color: 'red' }}>Atleast one tag is required</p>}\n\n                                </div>\n                            </Form.Group>\n                        </div>\n                        <div style={{ width: '200px' }}>\n                            <Form.Group as={Col}>\n                                <h4>Tags availabe</h4>\n                                <div style={{\n                                    border: '1px solid #000', height: '200px', width: '170px',\n                                    maxHeight: '200px', overflow: 'auto'\n                                }}>\n\n                                    <ul style={{ padding: '10px', display: 'flex', flexWrap: 'wrap' }}>\n                                        {tag && tag.map((tag, index) => (\n                                            <li key={index} style={{\n                                                width: 'auto', height: ' 32px', display: 'flex', alignItems: ' center',\n                                                justifyContent: 'center', color: '#fff', padding: ' 0 8px',\n                                                fontSize: ' 14px',\n                                                listStyle: 'none',\n                                                borderRadius: '6px',\n                                                margin: '0 8px 8px 0',\n                                                background: '#0052cc'\n                                            }}>\n                                                <span style={{ marginTop: '3px' }}>{tag.tag}</span>\n                                                <span\n                                                    onClick={() => {\n                                                        setTagNew([...tagNew, tag])\n                                                        reduceTag(tag._id)\n                                                    }}\n                                                    style={{\n                                                        display: 'block', flexDirection: 'row-reverse', width: '16px', height: '16px',\n                                                        lineHeight: '16px', textAlign: 'center', fontSize: '14px',\n                                                        marginLeft: '8px', color: ' #0052cc', alignItems: 'right',\n                                                        borderRadius: '50%', background: '#fff', cursor: 'pointer'\n                                                    }}\n                                                >\n                                                    +\n\t\t\t\t\t\t</span>\n                                            </li>\n                                        ))}\n                                    </ul>\n\n                                </div>\n                            </Form.Group>\n                        </div>\n                        <div>\n                        <Form.Group as={Col}>\n                            <Form.Label>Price</Form.Label>\n                            <Form.Control required type=\"number\" value={formf.price} onChange={(e) => setField('price', e.target.value)} placeholder=\"Enter Price\" />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please Enter price.\n            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col}>\n                            <Form.Label>Stock</Form.Label>\n                            <Form.Control required type=\"number\" value={formf.stock} onChange={(e) => setField('stock', e.target.value)} placeholder=\"Enter Stock\" />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please Enter Stock.\n            </Form.Control.Feedback>\n                        </Form.Group>\n                        \n                       <Form.Group as={Col}>\n                            <Form.Label>Url</Form.Label>\n                            <Form.Control  type=\"text\" value={formf.url} onChange={(e) => setField('url', e.target.value)} placeholder=\"Enter the url\" />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please Enter the urStock.\n            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Button onClick={()=>{setImgArray()}}>Add</Button>\n                      \n                        </div>\n                       <Form.Row>\n                           <Form.Group as={Col}>\n                           <Button\n                                onClick={() => setOpen(!open)}\n                                aria-controls=\"example-collapse-text\"\n                                aria-expanded={open}\n                            >\n                                {!open ? 'Edit Images' : 'close'}\n                            </Button>\n                           </Form.Group>\n                       </Form.Row>\n\n                            <Collapse in={open}>\n                                <div >\n                                    <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n\n\n                                        {gallery && gallery.map((team) => <div style={{\n                                            width: '120px', borderRadius: '10%', border: '1px solid #777',\n                                            display: 'flex', flexDirection: 'column',\n                                            margin: '10px', padding: \"5px\"\n                                        }}>\n                                            <BsTrashFill style={{ marginLeft: '80px' }} size={30} onClick={() => {\n                                                console.log(team._id)\n                                                 setGallery(gallery.filter(item => item !== team));\n                                            }} />\n                                            <img\n                                                src={team}\n                                                height=\"100px\"\n                                                width=\"100px\"\n                                                alt=\"added_image\"\n                                            />\n\n                                        </div>\n                                        )}\n                                    </div>\n                                </div>\n                            </Collapse>\n                        \n                        \n                        {/* <div style={{ width: '800px' }}>\n                          \n                            <Form.Group as={Col} style={{ paddingLeft: '10px', alignItems: 'center' }}>\n\n                                <div style={{ margin: '5px' }}>\n\n                                    <Button variant=\"primary\" onClick={() => {\n                                        setEditVariant({})\n                                        setEditImage([])\n                                        setTimeout(() => {\n                                            setIsVariantEdit(false)\n                                            setModalShow(true)\n                                        }, 1);\n\n                                    }\n                                    }>\n                                        Add Variants\n                              </Button>\n                                    {variantRequired && <p style={{ color: 'red' }}>Atleast one variant is required</p>}\n                                </div>\n                                <div >\n                                    {<MaterialTable title='Variants' data={dataChooser()}\n                                        columns={columns}\n                                        options={\n                                            {\n\n                                                paging: false, actionsColumnIndex: -1\n                                            }\n                                        }\n                                        actions={[\n                                            {\n                                                icon: 'edit',\n                                                tooltip: 'Edit Variant',\n                                                onClick: async (event, rowData) => {\n                                                    setEditImage(rowData.gallery)\n                                                    setEditVariant(rowData)\n                                                    setIsVariantEdit(true)\n                                                    setModalShow(true)\n                                                }\n                                            },\n                                        ]}\n                                        editable={{\n                                            onRowDelete: selectedRow => new Promise((resolve, reject) => {\n                                                const id = selectedRow._id\n\n                                                setVariantId(variantId.filter(item => item !== id))\n                                                setVariant(variant.filter(item => item._id !== id));\n                                                setTimeout(() => {\n                                                    resolve()\n                                                }, 1200)\n                                            }),\n                                        }}>\n                                    </MaterialTable>}\n                                </div>\n                                <VariantForm\n                                    variant={variant}\n                                    updatevariant={(data) => { ss(data) }}\n                                    show={modalShow}\n                                    editVariant={editVariant}\n                                    editImage={editImage}\n                                    onHide={() => setModalShow(false)}\n                                    onSave={(data) => { s(data) }}\n                                    edit={isVariantEdit}\n                                />\n                            </Form.Group>\n                        </div> */}\n                    </Form.Row>\n                    <Form.Row>\n                        <Form.Label>Dimensions :</Form.Label>\n                    </Form.Row>\n                    <Form.Row>\n\n                        <Form.Group as={Col} >\n                            <Form.Label>Height</Form.Label>\n                            <Form.Control required type=\"text\" value={formf.height} onChange={(e) => setField('height', e.target.value)} placeholder=\"Enter Height\" />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please Enter height of the product.\n            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} >\n                            <Form.Label>Width</Form.Label>\n                            <Form.Control required type=\"text\" value={formf.width} onChange={(e) => setField('width', e.target.value)} placeholder=\"Enter Width\" />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please Enter width of the product.\n            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} >\n                            <Form.Label>Depth</Form.Label>\n                            <Form.Control required type=\"text\" value={formf.depth} onChange={(e) => setField('depth', e.target.value)} placeholder=\"Enter Depth\" />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please Enter depth of the product.\n            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} >\n                            <Form.Label>Weight</Form.Label>\n                            <Form.Control required type=\"text\" value={formf.weight} onChange={(e) => setField('weight', e.target.value)} placeholder=\"Enter Weight\" />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please Enter weight of the product.\n            </Form.Control.Feedback>\n                        </Form.Group>\n                    </Form.Row>\n                    <Form.Row>\n                        <Form.Group as={Col} >\n                            <Form.Label>Warranty</Form.Label>\n                            <Form.Control required type=\"text\" value={formf.warranty} onChange={(e) => setField('warranty', e.target.value)} placeholder=\"Enter waranty details\" />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please Enter the warranty details.\n            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} >\n                            <Form.Label>Replacement Policy</Form.Label>\n                            <Form.Control required type=\"text\" value={formf.replacementPolicy} onChange={(e) => setField('replacementPolicy', e.target.value)} placeholder=\"Enter Replacement Policy\" />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please Enter the replacement policy.\n            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} >\n                            <Form.Label>Additional Information</Form.Label>\n                            <Form.Control required type=\"text\" value={formf.additionalInformation} onChange={(e) => setField('additionalInformation', e.target.value)} placeholder=\"Enter Additional Information\" />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please Enter additional information.\n            </Form.Control.Feedback>\n                        </Form.Group>\n                    </Form.Row>\n\n                    <Form.Row>\n                        <Form.Label>Manufacture Details:</Form.Label>\n                    </Form.Row>\n                    <Form.Row>\n                        <Form.Group as={Col} >\n                            <Form.Label> Model number</Form.Label>\n                            <Form.Control required type=\"text\" value={formf.modelNumber} onChange={(e) => setField('modelNumber', e.target.value)} placeholder=\"Enter Model Number\" />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please Enter the model number.\n            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} >\n                            <Form.Label> Model Name</Form.Label>\n                            <Form.Control required type=\"text\" value={formf.modelName} onChange={(e) => setField('modelName', e.target.value)} placeholder=\"Enter Model Name\" />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please Enter the model name.\n            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} >\n                            <Form.Label> Release Date</Form.Label>\n                            <Form.Control required type=\"date\" value={formf.releaseDate} onChange={(e) => setField('releaseDate', e.target.value)} placeholder=\"Enter Release date\" />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Choose the release date.\n            </Form.Control.Feedback>\n                        </Form.Group>\n                    </Form.Row>\n\n                    {\n                        isEdit &&\n                        <Form.Row>\n                            <Form.Group as={Col} >\n                                <Form.Check checked={formf.isActive === true}\n                                    type=\"radio\"\n                                    label=\"Active\"\n                                    name=\"formHorizontalRadios\"\n                                    onClick={() => setField('isActive', true)}\n                                    id=\"formHorizontalRadios1\"\n                                />\n                                <Form.Check checked={formf.isActive === false}\n                                    type=\"radio\"\n                                    label=\"InActive\"\n                                    onClick={() => setField('isActive', false)}\n                                    name=\"formHorizontalRadios\"\n                                    id=\"formHorizontalRadios2\"\n                                />\n                            </Form.Group>\n                        </Form.Row>\n                    }\n\n                    {storeError && <p style={{ color: 'red' }}>Cannot {isEdit ? 'Update' : 'Save'} the data </p>}\n                    <Button type='submit'>{isEdit ? 'Update' : 'Save'}</Button>\n                    <Button onClick={()=>{\n                        view()\n                    }}>View</Button>\n\n                    <Button style={{ margin: '10px' }} onClick={() => {\n                        props.history.push('/product')\n                    }}>\n                        Close\n                    </Button>\n                </Form>\n                \n\n            <Snackbar open={snackBarOpen} message={isEdit?\"Successfully Updated\":\"Successfully Added\"} \n             autoHideDuration={3500} onClose={handleCloseSnack}>\n        \n        </Snackbar>\n        \n\n        </div>\n    )\n}\nexport default ProductForm\n","/Users/mac/dev/store2/admin/src/orders/orderDetails.js",[],"/Users/mac/dev/store2/admin/src/products/variantForm.js",[],"/Users/mac/dev/store2/admin/src/products/product.js",["206","207","208","209","210","211"],"import React, { useEffect, useState, useContext } from 'react';\nimport MaterialTable from 'material-table'\nimport { Button, Spinner, } from 'react-bootstrap';\nimport { getAllProducts, deleteProduct, editProductFormatter } from './../services/productService'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport NavBar from '../components/navBar';\nimport * as axios from 'axios';\nimport { url, jwt, userId } from './../constants/auth';\n\nexport const Product = (props) => {\n    const [product, setProduct] = useState([])\n    const [barOpen, setBarOpen] = useState(false)\n    const [dbError, setDbError] = useState(false)\n\n    const getProduct = async () => {\n        try {\n            const token = localStorage.getItem(\"token\");\n            const res = await axios.get(url + '/product/user/60826e0faab69e002b1293d1', {\n                headers: {\n                    'Content-Type': 'application/json',\n                    authorization: `Bearer ${token}`\n                }\n            });\n            console.log(res)\n            if (res.status === 200) {\n                setProduct(res.data);\n            }\n        }\n        catch (error) {\n            if (error) {\n                setDbError(true);\n            }\n        }\n    }\n    const handleClose = () => {\n        setBarOpen(false)\n    }\n\n    const columns = [{ title: \"Product ID\", field: '_id' },\n    { title: \"Product Name\", field: 'name' },\n    { title: \"Brand Name\", field: 'brand.brandName' },\n    { title: 'Model Name', field: \"manufactureDetails.modelName\" },\n    { title: \"Category\", field: 'category.name' },\n    //  {title:\"Variants\",field:'variants.length'},\n    { title: \"Images\", field: 'gallery.length' },\n    { title: \"Tags\", field: 'tags.length' },\n    // {title:\"Stock\",field:'variants[0].stock'},\n    // {title:\"Price\",field:'variants[0].price'},\n    {\n        title: \"Is Active\", field: 'isActive',\n        render: rowData => {\n            if (rowData.isActive) {\n                return (\n                    <p style={{ color: 'green', fontWeight: \"bolder\" }}>Active</p>\n                )\n            }\n            else {\n                return (\n                    <p style={{ color: 'red', fontWeight: \"bolder\" }}>InActive</p>\n                )\n            }\n        }\n    },\n    ]\n    useEffect(() => {\n        console.log(11111);\n        getProduct().then(() => {\n            console.log(2222);\n            fetch(url + '/auth/refresh_token', {\n                method: 'POST', credentials: 'include', headers: {\n                    'Content-Type': 'application/json',\n                }\n            })\n                .then(res => res.json())\n                .then(data => {\n                    console.log(data);\n                    if (!data.token) {\n                        return;\n                    }\n                    console.log(data.token);\n                    localStorage.setItem(\"token\", data.token);\n                });\n        });\n    }, []);\n    return (\n\n        <div >\n\n            <NavBar {...props}></NavBar>\n\n\n            <div>\n                <div style={{ margin: '10px 20px' }}>\n                    <Button onClick={() => { props.history.push('/product/add') }}>Add Product</Button>\n\n                </div>\n                <MaterialTable style={{ margin: '15px' }} title=\"Products\" data={product} columns={columns}\n                    actions={[\n                        {\n\n                            icon: 'edit',\n                            tooltip: 'Edit User',\n                            onClick: async (event, rowData) => {\n                                const edit = await editProductFormatter(rowData)\n                                console.log(\"Edit\", edit)\n                                props.history.replace({\n                                    pathname: '/product/edit',\n                                    state: edit\n                                })\n                            }\n                        },\n                    ]}\n                    editable={{\n                        onRowDelete: selectedRow => new Promise(async (resolve, reject) => {\n                            const id = selectedRow._id\n                            console.log(id)\n                            const data = await deleteProduct(id)\n                            if (data) {\n                                setBarOpen(true)\n                                getProduct()\n                                resolve()\n                            }\n                        }),\n                    }}\n\n                    options={{\n                        actionsColumnIndex: -1,\n                        showFirstLastPageButtons: false,\n                        pageSizeOptions: [5, 10, 20, 50]\n                    }}\n\n                >\n\n                </MaterialTable>\n\n            </div>\n\n\n            <Snackbar open={barOpen} message=\"Successfully Deleted\" autoHideDuration={3500} onClose={handleClose}>\n\n            </Snackbar>\n        </div>\n\n    )\n}\nexport default Product","/Users/mac/dev/store2/admin/src/category/categoryList.js",["212","213"],"import React, { useState,useEffect } from 'react'\nimport MaterialTable from 'material-table'\nimport { getAllCategory,deleteCategory ,deleteSubCategory} from './../services/categoryService'\nimport { Button,Spinner } from 'react-bootstrap'\nimport './categoryList.css'\nimport CategoryForm from './categoryForm'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport NavBar from './../components/navBar'\nexport const CategoryList = (props) => {\n    const [categoryList, setCategoryList] = useState(null)\n    const [modalShow, setModalShow] = useState(false)\n    const [isEditCategory, setIsEditCategory] = useState(false)\n    const [editCategory, setEditCategory] = useState([])\n    const [dbError,setDbError] = useState(false)\n    const [snackBarOpen,setSnackBarOpen] = useState(false)\n    const handleCloseSnack=()=>{\n        setSnackBarOpen(false)\n    }\n    const columns= [{ title: \"Category Name\", field: 'name' },\n        {\n            title: \"Is Active\", field: 'isActive',\n            render: rowData => {\n                if (rowData.isActive) {\n                        return (\n                            <p style={{ color: 'green', fontWeight: \"bolder\" }}>Active</p>\n                                 )\n                }\n                else {\n                    return (\n                        <p style={{ color: 'red', fontWeight: \"bolder\" }}>InActive</p>\n                            )\n                }\n            }\n        },\n    ]\n\n\nconst modalOpen=()=> {\n\n   setModalShow(true)\n\n}\nconst modalClose=()=> {\n    setModalShow(false)\n    setTimeout(() => {\n        setIsEditCategory(false)\n    }, 2000);\n\n}\nconst onSave = async () => {\n   setModalShow(false)\n  setTimeout(() => {\n    setIsEditCategory(false)\n  }, 2000);\n   getCategory()\n\n}\n\nconst editActive=(data)=> {\n    setEditCategory(data)\n    // console.log(data)\n    setIsEditCategory(true)\n    setModalShow(true)\n\n}\n// const view=()=> {\n//     console.log('DB List', categoryList)\n//     console.log('Edit List',editCategory)\n//     console.log('isEdit', isEditCategory)\n// }\nconst getCategory=async()=>{\n    const data = await getAllCategory()\n    console.log(\"Cat\",data)\n   if(data){\n    setCategoryList(data)\n    \n   }\n   else{\n       setDbError(true)\n   }\n}\nconst subCategoryColumn=[{ title: \"Name\", field: 'name' },\n{\n    title: \"Is Active\", field: 'isActive',\n    render: rowData => {\n        if (rowData.isActive) {\n            return (\n                <p style={{ color: 'green', fontWeight: \"bolder\" }}>Active</p>\n            )\n        }\n        else {\n            return (\n                <p style={{ color: 'red', fontWeight: \"bolder\" }}>InActive</p>\n            )\n        }\n    }\n},\n                        ]\nuseEffect(()=>{\n    getCategory()\n    setDbError(false)\n    setSnackBarOpen(false)\n // eslint-disable-next-line react-hooks/exhaustive-deps      \n},[props])\n\n    return (\n        <div>\n            <NavBar></NavBar>\n\n\n                <div>\n                    <Button style={{margin:'10px 30px'}} onClick={() => modalOpen()}>Add Category</Button>\n                    <Button style={{margin:'10px 30px'}} onClick={() => props.history.push('/category/addSubCategory')}>Add SubCategory</Button>\n{categoryList &&\n    <div className='table'>\n        <MaterialTable style={{ marginTop: '15px' }} title=\"Category\" data={categoryList}\n            columns={columns}\n            actions={[\n                {\n                    icon: 'edit',\n                    tooltip: 'Edit category',\n                    onClick: async (event, rowData) => {\n                        editActive(rowData)\n                    }\n                },\n            ]}\n            editable={{\n                onRowDelete: selectedRow => new Promise(async (resolve, reject) => {\n                    const id = selectedRow._id\n                    const data = await deleteCategory(id)\n                    if(data){\n                        setSnackBarOpen(true)\n                        setTimeout(() => {\n                            getCategory()\n                            resolve()\n                        }, 2000);\n                        \n                    }\n                }),\n            }}\n            options={{\n                actionsColumnIndex: -1,\n                showFirstLastPageButtons: false,\n                pageSizeOptions: [5, 10, 20, 50],\n                detailPanelColumnAlignment:'right'\n            }}\n            \n            detailPanel={[\n                {\n                    icon:'expand_more',\n                  tooltip: 'Show Sub-Category',\n                  onRowClick: async (event, rowData) => {\n                    console.log(rowData)\n                },\n                  render: rowData => {\n                    return (\n                      <div\n                        style={{\n                        }}\n                      >\n                        <MaterialTable style={{border:\"3px solid #067BFD\"}} title='Sub Category' columns={subCategoryColumn} data={rowData.subCategories}\n                       options={{\n                        search: false,\n                        toolbar:false,\n                        paging:false,\n                        actionsColumnIndex:-1\n                      }}\n                      actions={[\n                        {\n                            icon: 'edit',\n                            tooltip: 'Edit sub Category',\n                            onClick: async (event, rowData) => {\n                                console.log(rowData)\n                                props.history.replace({\n                                    pathname: '/category/addSubCategory',\n                                    state: rowData \n                                  })\n                            }\n                        },\n                    ]}\n                    editable={{\n                        onRowDelete: selectedRow => new Promise(async (resolve, reject) => {\n                            const id = selectedRow._id\n                            const data = await deleteSubCategory(id)\n                            if(data){\n                                setSnackBarOpen(true)\n                                setTimeout(() => {\n                                    getCategory()\n                                    resolve()\n                                }, 1000);\n                                \n                            }\n                        }),\n                    }}\n                        ></MaterialTable>\n                      </div>\n                    )\n                  },\n                },\n               \n              ]}\n        >\n        </MaterialTable>\n    </div>\n}\n\n<CategoryForm\n    onHide={() => {\n        modalClose()\n    }}\n    show={modalShow}\n    onSave={() => {onSave() }}\n    isEdit={isEditCategory}\n    editCategory={editCategory}\n></CategoryForm>\n<Snackbar open={snackBarOpen} message=\"Successfully Deleted\" \n            autoHideDuration={3500} onClose={handleCloseSnack}>\n       \n       </Snackbar>\n                </div>\n\n        </div>\n    )\n\n}\nexport default CategoryList","/Users/mac/dev/store2/admin/src/orders/orderList.js",[],"/Users/mac/dev/store2/admin/src/tag/tagList.js",[],"/Users/mac/dev/store2/admin/src/category/subCategory/subCategoryForm.js",[],"/Users/mac/dev/store2/admin/src/category/categoryForm.js",[],"/Users/mac/dev/store2/admin/src/tag/tagModal.js",[],"/Users/mac/dev/store2/admin/src/components/navBar.js",[],"/Users/mac/dev/store2/admin/src/services/productService.js",["214","215","216"],"import * as axios from 'axios'\nimport { url, jwt, userId } from './../constants/auth';\nimport React, { useState } from \"react\";\n//Get all Products.\nexport const getAllProducts = async () => {\n}\n\n//Get Categories.\n\n\n//Get Tags\nexport const getAllTags = async () => {\n    try {\n        const dataTag = await axios.get(url + '/all/tag')\n        if (!dataTag.data.error) {\n            return dataTag.data.tags\n        }\n    }\n    catch (error) {\n        if (error) {\n            return false\n        }\n        // console.log(error)\n    }\n}\n\n//Get Variants\nexport const getAllVariants = async () => {\n    try {\n        const dataVariant = await axios.get(url + '/all/variants')\n        if (!dataVariant.data.error) {\n            return dataVariant.data.variants\n        }\n    }\n    catch (error) {\n        if (error) {\n            return false\n        }\n        // console.log(error)\n    }\n}\n// Upload/Addd formatter\nexport const adduploadFormatter = (formf, gallery, tagId) => {\n    const final = {\n        name: formf.name,\n        category: formf.category,\n        tags: tagId,\n        price: formf.price,\n        stock: formf.stock,\n        gallery: gallery,\n        subCategory: formf.subCategory,\n        brand: { brandName: formf.brandName },\n        shortDescription: formf.shortDescription,\n        warranty: formf.warranty,\n        replacementPolicy: formf.replacementPolicy,\n        additionalInformation: formf.additionalInformation,\n        description: formf.description,\n        dimensions: {\n            height: formf.height,\n            weight: formf.weight,\n            depth: formf.depth,\n            width: formf.width\n        },\n        manufactureDetails: {\n            modelNumber: formf.modelNumber,\n            modelName: formf.modelName,\n            releaseDate: formf.releaseDate\n        }, \"jwtToken\": jwt,\n        isActive: formf.isActive\n\n\n    }\n    return final\n}\n\n//Add Product\nexport const addProduct = async (formf, gallery, tagId) => {\n    const final = await adduploadFormatter(formf, gallery, tagId)\n    console.log(\"Final\", final)\n    try {\n        const data = await axios.post(url + '/add/product/' + userId, final)\n        console.log(\"-----\", data)\n        if (!data.data.error) {\n\n            return true\n        }\n    }\n    catch (error) {\n        if (error) {\n            return false\n        }\n        // console.log(error)\n    }\n    // console.log('final', final)\n}\n\n//Deleting a product\nexport const deleteProduct = async (id) => {\n\n\n    try {\n        const data = await axios.delete(url + '/delete/product/' + userId + '/' + id, {\n            data:\n            {\n                \"jwtToken\": jwt\n            }\n        })\n        if (!data.data.error) {\n            return true\n        }\n    }\n    catch (error) {\n        if (error) {\n            return false\n        }\n        // console.log('del', error)\n    }\n}\n//edit values  are formatted for props \nexport const editProductFormatter = (data) => {\n    // console.log('data', data)\n    const tagId = []\n    //data.tags.map((edit)=>{\n    //    tagId.push(edit._id)\n    //    return null;\n    //})\n    const edit = {\n        id: data._id,\n        name: data.name,\n        //category: data.category._id,\n        price: data.price,\n        //subCategory:data.subCategory._id,\n        stock: data.stock,\n        gallery: data.gallery,\n        //brandName: data.brand.brandName,\n        shortDescription: data.shortDescription,\n        description: data.description,\n        isActive: data.isActive\n    }\n    // console.log('Editt',edit)\n\n    return edit\n}\nexport const editProduct = async (formf, id, gallery, tagId) => {\n    const final = await adduploadFormatter(formf, gallery, tagId\n    )\n    // console.log('final',final,id)\n    try {\n        const data = await axios.put(url + '/update/product/' + userId + '/' + id, final)\n        // console.log(\"Data of update\",data.data.error)\n        if (!data.data.error) {\n\n            return true\n        }\n    }\n    catch (err) {\n        if (err) {\n            return false\n        }\n        // console.log(\"Error in update prouct\",err)\n    }\n}\n\n//Add Variants\nexport const addVariant = async (variant, imageArray) => {\n\n    try {\n        const data = await axios.post(url + '/add/variant/' + userId,\n            {\n                color: variant.color,\n                size: variant.size,\n                price: variant.price,\n                stock: variant.stock,\n                gallery: imageArray,\n                \"jwtToken\": jwt\n            })\n        // console.log(data)\n        if (!data.data.error) {\n\n            return data.data.data\n        }\n    }\n    catch (err) {\n        if (err) {\n            return false\n        }\n        // console.log(\"error in add variant\",err)\n    }\n\n}\n\n//Update Variant\nexport const updateVariant = async (variant, imageArray, variantId) => {\n    try {\n        const data = await axios.put(url + '/update/variant/' + userId + '/' + variantId,\n            {\n                color: variant.color,\n                size: variant.size,\n                price: variant.price,\n                stock: variant.stock,\n                gallery: imageArray,\n                \"jwtToken\": jwt\n            })\n\n        if (!data.data.error) {\n            return data\n        }\n    }\n    catch (error) {\n        if (error) {\n            return false\n        }\n        // console.log(\"Error in update variant\",error)\n    }\n}\n\nexport const getTotalProducts = async () => {\n    try {\n        const data = await axios.get(url + '/get/totalProducts')\n        // console.log(\"TNumber of products\",data.data.totalProducts)\n        if (!data.data.error) {\n            return {\n                error: false,\n                data: data.data.totalProducts\n            }\n        }\n        else {\n            return false\n        }\n    }\n    catch (error) {\n        console.log(error)\n    }\n}\nexport const getActiveProducts = async () => {\n    try {\n        const data = await axios.get(url + '/get/activeProducts')\n        // console.log(\"TNumber of products\",data.data.totalProducts)\n        if (!data.data.error) {\n            return {\n                data: data.data.activeProducts,\n                error: false\n            }\n        }\n        else {\n            return false\n        }\n    }\n    catch (error) {\n        console.log(error)\n    }\n}","/Users/mac/dev/store2/admin/src/services/authserivce.js",["217"],"import axios from \"axios\";\nimport { url } from './../constants/auth'\n\nexport const Login = async (username, password) => {\n    const res = await fetch(url + \"/auth/login\", {\n        method: 'POST', headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n            username,\n            password\n        })\n    });\n    return res.json();\n}\n","/Users/mac/dev/store2/admin/src/services/tagService.js",[],"/Users/mac/dev/store2/admin/src/services/categoryService.js",[],"/Users/mac/dev/store2/admin/src/services/orderService.js",[],"/Users/mac/dev/store2/admin/src/constants/auth.js",[],"/Users/mac/dev/store2/admin/src/products/productEditForm.js",["218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233"],"import React, { useState, useEffect } from 'react'\nimport { Form, Col, Collapse, Button, Spinner } from 'react-bootstrap';\nimport { getAllTags, addProduct, editProduct } from './../services/productService'\nimport { getAllCategory, getAllSubCategory } from './../services/categoryService'\nimport { BsTrashFill } from \"react-icons/bs\";\n\n// import { VariantForm } from './variantForm'\n// import MaterialTable from 'material-table'\nimport { addTag } from './../services/tagService'\nimport Snackbar from '@material-ui/core/Snackbar'\n\nexport const ProductForm = (props) => {\n\n    const styles = {\n        margin: \"20px 50px\"\n    }\n    const [open, setOpen] = useState(false);\n\n    // const columns = [{ title: \"Color\", field: 'color' },\n    // { title: \"Size\", field: 'size' },\n    // { title: \"Price\", field: 'price' },\n    // { title: \"Stock\", field: 'stock' },\n    // ]\n    const [snackBarOpen, setSnackBarOpen] = useState(false)\n    const handleCloseSnack = () => {\n        setSnackBarOpen(false)\n    }\n    // const [editImage, setEditImage] = useState([])\n    // const [editVariant, setEditVariant] = useState({})\n    // const [isVariantEdit, setIsVariantEdit] = useState(false)\n    // const [modalShow, setModalShow] = React.useState(false);\n    const [gallery, setGallery] = useState([])\n    const [tag, setTag] = useState([])\n    const [tagNew, setTagNew] = useState([])\n    const [tagInput, setTagInput] = useState('')\n    const [subCategory, setSubCategory] = useState(null)\n    const [category, setCategory] = useState(null)\n    // const [variant, setVariant] = useState([])\n    // const [variantId, setVariantId] = useState([])\n    const [formf, setForm] = useState({ url: '' })\n    const [isEdit, setIsEdit] = useState(false)\n    const [tagId, setTagId] = useState([])\n    const [nullTag, setNullTag] = useState(false)\n    const [tagRequired, setTagRequired] = useState(false)\n    // const {edit} = props.location.state\n    const getValues = async () => {\n\n        try {\n            const category = await getAllCategory()\n            setCategory(category)\n            const tag = await getAllTags()\n            if (props.location.state) {\n                setTagId(props.location.state.tagId)\n\n                //const data = await tag.filter(item => {\n                //    return props.location.state.tagId.indexOf(item._id) === -1\n                //})\n                //setTag(data)\n            }\n            else {\n                setTag(tag)\n            }\n        }\n        catch (err) {\n            console.log(err)\n\n        }\n        if (!props.location.state) {\n\n            setIsEdit(false)\n        }\n        else {\n            setForm(props.location.state)\n            // setVariant(props.location.state.variants)\n            console.log(props.location.state)\n            setTagNew(props.location.state.tags)\n            setSub(props.location.state.category)\n            setGallery(props.location.state.gallery)\n            setIsEdit(true)\n        }\n    }\n    useEffect(() => {\n        getValues()\n        // setVariantRequired(false)\n        setTagRequired(false)\n        setValidated(false)\n        setStoreError(false)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n    // const tageditor=async(data)=>{\n    //    setTag(data)\n    // }\n    // const dataChooser = () => {\n\n    //     return variant\n    // }\n    const setSub = async (value) => {\n        //const data = await getAllSubCategory(value)\n        //    console.log('-----------',data)\n        //    setSubCategory(data)\n    }\n    const setField = async (field, value) => {\n        if (field === 'category') {\n            console.log('foreds', field, value)\n            setSub(value)\n        }\n        setForm({\n            ...formf,\n            [field]: value\n        })\n    }\n    const tagEvent = (e) => {\n        setTagInput(\n            e\n        )\n        setNullTag(false)\n\n    }\n    const setImgArray = () => {\n        if (formf.url !== '') {\n            console.log(formf.url)\n            setGallery([...gallery,\n            formf.url])\n            setForm({\n                ...formf,\n                url: ''\n            })\n        }\n    }\n    const view = () => {\n        console.log('newtag', tagNew)\n        console.log('tagid', tagId)\n        console.log('----', formf)\n        console.log('oldtag', tag)\n        console.log(gallery)\n    }\n    // const ss = (data) => {\n    //     setVariantRequired(false)\n    //     setVariant(\n    //         data\n    //     )\n    //     setModalShow(false)\n    // }\n    // const s = (data) => {\n    //     setVariantRequired(false)\n    //     console.log('Saved',data)\n    //     setVariant([\n    //         ...variant,\n    //         data\n    //     ])\n    //     setVariantId([\n    //         ...variantId,\n    //         data._id])\n    //     setModalShow(false)\n    // }\n    const addTagHandler = async () => {\n        if (tagInput !== '') {\n            const data = await addTag(tagInput, false)\n            setTagNew([\n                ...tagNew,\n                data\n            ])\n            console.log(\"New Tag\", data)\n            setTagId([\n                ...tagId,\n                data._id\n            ])\n            setTagInput('')\n            setNullTag(false)\n        }\n        else {\n            setNullTag(true)\n        }\n    }\n    const reduceTag = (id) => {\n        setTagId([\n            ...tagId,\n            id\n        ])\n        setTag(tag.filter(item => item._id !== id))\n    }\n    const popTag = (id) => {\n        setTagId(tagId.filter(item => item !== id))\n        setTagNew(tagNew.filter(item => item._id !== id))\n    }\n    const [validated, setValidated] = useState(false);\n    const [storeError, setStoreError] = useState(false);\n    // const [variantRequired, setVariantRequired] = useState(false)\n    const handleSubmit = async (event) => {\n        const form = event.currentTarget;\n        console.log(tagId.length !== 0)\n        if (tagId.length !== 0 && gallery.length !== 0 && form.checkValidity() === true) {\n\n            event.preventDefault();\n            // setVariantRequired(false)\n            setTagRequired(false)\n            if (isEdit) {\n                // console.log('update')\n                const data = await editProduct(formf, props.location.state.id, gallery, tagId)\n                if (data) {\n                    console.log('hi')\n                    setSnackBarOpen(true)\n                    setTimeout(() => {\n                        props.history.push('/product/')\n\n                    }, 1000);\n                }\n                else {\n                    setStoreError(true)\n                }\n            }\n            else {\n                console.log('hi')\n                const data = await addProduct(formf, gallery, tagId)\n                if (data) {\n                    setSnackBarOpen(true)\n                    setTimeout(() => {\n                        props.history.push('/product')\n\n                    }, 1000);\n\n                }\n                else {\n                    setStoreError(true)\n                }\n            }\n        }\n\n        else if (tagId.length === 0) {\n            // setVariantRequired(false)\n            setTagRequired(true)\n            event.preventDefault();\n        }\n        else {\n            event.preventDefault();\n            setTagRequired(false)\n            // setVariantRequired(true)\n        }\n        setValidated(true);\n    };\n\n\n    return (\n        <div>\n            <Form style={styles} noValidate validated={validated} onSubmit={handleSubmit}>\n                <p>Update Product</p>\n                <Form.Row>\n                    <Form.Group as={Col} >\n                        <Form.Label>Product Name</Form.Label>\n                        <Form.Control required type=\"text\" value={formf.name} onChange={(e) => setField('name', e.target.value)} placeholder=\"Enter Product Name\" />\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please Enter a Product Name.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                </Form.Row>\n                <Form.Row>\n                    <Form.Group as={Col} >\n                        <Form.Label>Brand Name</Form.Label>\n                        <Form.Control required type=\"text\" value={formf.brandName} onChange={(e) => setField('brandName', e.target.value)} placeholder=\"Enter Brand Name\" />\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please Enter a Brand Name.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                </Form.Row>\n                <Form.Row>\n                    <Form.Group as={Col}>\n                        <Form.Label>Short Desription</Form.Label>\n                        <Form.Control required type=\"text\" value={formf.shortDescription} onChange={(e) => setField('shortDescription', e.target.value)} placeholder=\"Enter Short Description\" />\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please Enter short description.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                </Form.Row>\n                <Form.Row>\n                    <Form.Group as={Col}>\n                        <Form.Label>Desription</Form.Label>\n                        <Form.Control required as=\"textarea\" value={formf.description} onChange={(e) => setField('description', e.target.value)} placeholder=\"Enter Description\" />\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please Enter description.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                </Form.Row>\n                <Form.Row>\n                    <Form.Group as={Col}>\n                        <Form.Label>Sub Category</Form.Label>\n                        <Form.Control required as=\"select\" defaultValue='' value={formf.subCategory} onChange={(e) => setField('subCategory', e.target.value)} >\n                            <option value=''>Select a Category</option>\n                            {subCategory && subCategory.map((team) => <option key={team._id} value={team._id}>{team.name}</option>)}\n                        </Form.Control>\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please  choose a Category.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                </Form.Row>\n                <Form.Row>\n                    <Form.Group as={Col}>\n                        <Form.Label>Price</Form.Label>\n                        <Form.Control required type=\"number\" value={formf.price} onChange={(e) => setField('price', e.target.value)} placeholder=\"Enter Price\" />\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please Enter price.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                </Form.Row>\n                <Form.Row>\n                    <Form.Group as={Col}>\n                        <Form.Label>Stock</Form.Label>\n                        <Form.Control required type=\"number\" value={formf.stock} onChange={(e) => setField('stock', e.target.value)} placeholder=\"Enter Stock\" />\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please Enter Stock.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                </Form.Row>\n                <Form.Row>\n                    <Form.Group as={Col}>\n                        <Form.Label>Image</Form.Label>\n                        <Form.File value={formf.url} onChange={(e) => setField('url', e.target.value)} placeholder=\"Enter the url\" />\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please Enter the urStock.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                </Form.Row>\n\n                {\n                    isEdit &&\n                    <Form.Row>\n                        <Form.Group as={Col} >\n                            <Form.Check checked={formf.isActive === true}\n                                type=\"radio\"\n                                label=\"Active\"\n                                name=\"formHorizontalRadios\"\n                                onClick={() => setField('isActive', true)}\n                                id=\"formHorizontalRadios1\"\n                            />\n                            <Form.Check checked={formf.isActive === false}\n                                type=\"radio\"\n                                label=\"InActive\"\n                                onClick={() => setField('isActive', false)}\n                                name=\"formHorizontalRadios\"\n                                id=\"formHorizontalRadios2\"\n                            />\n                        </Form.Group>\n                    </Form.Row>\n                }\n\n                {storeError && <p style={{ color: 'red' }}>Cannot {isEdit ? 'Update' : 'Save'} the data </p>}\n                <Button type='submit'>Update</Button>\n                <Button style={{ margin: '10px' }} onClick={() => {\n                    props.history.push('/product')\n                }}>\n                    Back\n                </Button>\n            </Form>\n\n\n            <Snackbar open={snackBarOpen} message={isEdit ? \"Successfully Updated\" : \"Successfully Added\"}\n                autoHideDuration={3500} onClose={handleCloseSnack}>\n            </Snackbar>\n\n\n        </div>\n    )\n}\nexport default ProductForm\n",{"ruleId":"234","replacedBy":"235"},{"ruleId":"236","replacedBy":"237"},{"ruleId":"238","severity":1,"message":"239","line":3,"column":10,"nodeType":"240","messageId":"241","endLine":3,"endColumn":13},{"ruleId":"238","severity":1,"message":"242","line":3,"column":15,"nodeType":"240","messageId":"241","endLine":3,"endColumn":18},{"ruleId":"238","severity":1,"message":"243","line":4,"column":10,"nodeType":"240","messageId":"241","endLine":4,"endColumn":24},{"ruleId":"238","severity":1,"message":"244","line":5,"column":10,"nodeType":"240","messageId":"241","endLine":5,"endColumn":19},{"ruleId":"238","severity":1,"message":"245","line":6,"column":10,"nodeType":"240","messageId":"241","endLine":6,"endColumn":21},{"ruleId":"238","severity":1,"message":"246","line":19,"column":21,"nodeType":"240","messageId":"241","endLine":19,"endColumn":31},{"ruleId":"238","severity":1,"message":"247","line":1,"column":27,"nodeType":"240","messageId":"241","endLine":1,"endColumn":37},{"ruleId":"238","severity":1,"message":"248","line":1,"column":39,"nodeType":"240","messageId":"241","endLine":1,"endColumn":48},{"ruleId":"238","severity":1,"message":"249","line":2,"column":38,"nodeType":"240","messageId":"241","endLine":2,"endColumn":45},{"ruleId":"238","severity":1,"message":"250","line":4,"column":24,"nodeType":"240","messageId":"241","endLine":4,"endColumn":41},{"ruleId":"238","severity":1,"message":"251","line":36,"column":25,"nodeType":"240","messageId":"241","endLine":36,"endColumn":39},{"ruleId":"238","severity":1,"message":"252","line":37,"column":12,"nodeType":"240","messageId":"241","endLine":37,"endColumn":20},{"ruleId":"238","severity":1,"message":"247","line":1,"column":38,"nodeType":"240","messageId":"241","endLine":1,"endColumn":48},{"ruleId":"238","severity":1,"message":"249","line":3,"column":18,"nodeType":"240","messageId":"241","endLine":3,"endColumn":25},{"ruleId":"238","severity":1,"message":"253","line":4,"column":10,"nodeType":"240","messageId":"241","endLine":4,"endColumn":24},{"ruleId":"238","severity":1,"message":"254","line":8,"column":15,"nodeType":"240","messageId":"241","endLine":8,"endColumn":18},{"ruleId":"238","severity":1,"message":"255","line":8,"column":20,"nodeType":"240","messageId":"241","endLine":8,"endColumn":26},{"ruleId":"238","severity":1,"message":"256","line":13,"column":12,"nodeType":"240","messageId":"241","endLine":13,"endColumn":19},{"ruleId":"238","severity":1,"message":"249","line":4,"column":17,"nodeType":"240","messageId":"241","endLine":4,"endColumn":24},{"ruleId":"238","severity":1,"message":"256","line":14,"column":12,"nodeType":"240","messageId":"241","endLine":14,"endColumn":19},{"ruleId":"238","severity":1,"message":"257","line":3,"column":8,"nodeType":"240","messageId":"241","endLine":3,"endColumn":13},{"ruleId":"238","severity":1,"message":"258","line":3,"column":17,"nodeType":"240","messageId":"241","endLine":3,"endColumn":25},{"ruleId":"238","severity":1,"message":"259","line":122,"column":11,"nodeType":"240","messageId":"241","endLine":122,"endColumn":16},{"ruleId":"238","severity":1,"message":"260","line":1,"column":8,"nodeType":"240","messageId":"241","endLine":1,"endColumn":13},{"ruleId":"238","severity":1,"message":"261","line":2,"column":21,"nodeType":"240","messageId":"241","endLine":2,"endColumn":29},{"ruleId":"238","severity":1,"message":"249","line":2,"column":39,"nodeType":"240","messageId":"241","endLine":2,"endColumn":46},{"ruleId":"238","severity":1,"message":"250","line":4,"column":26,"nodeType":"240","messageId":"241","endLine":4,"endColumn":43},{"ruleId":"238","severity":1,"message":"262","line":5,"column":10,"nodeType":"240","messageId":"241","endLine":5,"endColumn":21},{"ruleId":"238","severity":1,"message":"263","line":17,"column":12,"nodeType":"240","messageId":"241","endLine":17,"endColumn":16},{"ruleId":"238","severity":1,"message":"264","line":17,"column":18,"nodeType":"240","messageId":"241","endLine":17,"endColumn":25},{"ruleId":"238","severity":1,"message":"251","line":36,"column":25,"nodeType":"240","messageId":"241","endLine":36,"endColumn":39},{"ruleId":"238","severity":1,"message":"252","line":37,"column":12,"nodeType":"240","messageId":"241","endLine":37,"endColumn":20},{"ruleId":"238","severity":1,"message":"265","line":43,"column":12,"nodeType":"240","messageId":"241","endLine":43,"endColumn":19},{"ruleId":"238","severity":1,"message":"266","line":44,"column":12,"nodeType":"240","messageId":"241","endLine":44,"endColumn":23},{"ruleId":"238","severity":1,"message":"267","line":112,"column":11,"nodeType":"240","messageId":"241","endLine":112,"endColumn":19},{"ruleId":"238","severity":1,"message":"268","line":119,"column":11,"nodeType":"240","messageId":"241","endLine":119,"endColumn":22},{"ruleId":"238","severity":1,"message":"269","line":130,"column":11,"nodeType":"240","messageId":"241","endLine":130,"endColumn":15},{"ruleId":"238","severity":1,"message":"270","line":156,"column":11,"nodeType":"240","messageId":"241","endLine":156,"endColumn":24},{"ruleId":"238","severity":1,"message":"271","line":175,"column":11,"nodeType":"240","messageId":"241","endLine":175,"endColumn":20},{"ruleId":"238","severity":1,"message":"272","line":182,"column":11,"nodeType":"240","messageId":"241","endLine":182,"endColumn":17},"no-native-reassign",["273"],"no-negated-in-lhs",["274"],"no-unused-vars","'Col' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'FiShoppingCart' is defined but never used.","'BiPackage' is defined but never used.","'FaTicketAlt' is defined but never used.","'setDbError' is assigned a value but never used.","'useContext' is defined but never used.","'useEffect' is defined but never used.","'Spinner' is defined but never used.","'getAllSubCategory' is defined but never used.","'setSubCategory' is assigned a value but never used.","'category' is assigned a value but never used.","'getAllProducts' is defined but never used.","'jwt' is defined but never used.","'userId' is defined but never used.","'dbError' is assigned a value but never used.","'React' is defined but never used.","'useState' is defined but never used.","'tagId' is assigned a value but never used.","'axios' is defined but never used.","'Collapse' is defined but never used.","'BsTrashFill' is defined but never used.","'open' is assigned a value but never used.","'setOpen' is assigned a value but never used.","'nullTag' is assigned a value but never used.","'tagRequired' is assigned a value but never used.","'tagEvent' is assigned a value but never used.","'setImgArray' is assigned a value but never used.","'view' is assigned a value but never used.","'addTagHandler' is assigned a value but never used.","'reduceTag' is assigned a value but never used.","'popTag' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]